GET_PROPERTY(DUKTAPEDIR GLOBAL PROPERTY DUKTAPEDIR)
IF(NOT IS_DIRECTORY ${DUKTAPEDIR})
    SET(DUKTAPEDIR "${PROJECT_SOURCE_DIR}/lib/duktape/")
ENDIF()
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O3")
SET(DEBUG_SOCK_FILE "")
IF(${DUK_DEBUG} MATCHES "TRUE")
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O3 -pedantic -std=gnu99 -Wall -fstrict-aliasing -fomit-frame-pointer")
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DDUK_CMDLINE_DEBUGGER_SUPPORT")     # enable --debugger in ./duk
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DDUK_OPT_DEBUGGER_SUPPORT")         # enable debugger support in Duktape
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DDUK_OPT_INTERRUPT_COUNTER")        # prerequisite for debugging
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DDUK_OPT_DEBUGGER_FWD_PRINTALERT")  # optional debugger features
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DDUK_OPT_DEBUGGER_FWD_LOGGING")
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DDUK_OPT_DEBUGGER_DUMPHEAP")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DDUK_OPT_DEBUGGER_PAUSE_UNCAUGHT")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DDUK_OPT_DEBUGGER_THROW_NOTIFY")
    IF(MSVC)
        SET(DEBUG_SOCK_FILE "${PROJECT_SOURCE_DIR}/src/duk_trans_win_socket.c")
    ELSE()
        SET(DEBUG_SOCK_FILE "${PROJECT_SOURCE_DIR}/src/duk_trans_socket.c")
    ENDIF()
ENDIF()

#optimize for binary size
INCLUDE_DIRECTORIES(
    ${DUKTAPEDIR}/prep/
    ${DUKTAPEDIR}/extras/print-alert/
    ${DUKTAPEDIR}/extras/module-duktape/
    )

FILE(GLOB DUKTAPE_C_SOURCE ${DUKTAPEDIR}/src/*.c ${DUKTAPEDIR}/extras/print-alert/*.c ${DUKTAPEDIR}/extras/module-duktape/*.c)
ADD_LIBRARY(duktape STATIC ${DUKTAPE_C_SOURCE} ${DEBUG_SOCK_FILE})

IF("${CMAKE_SYSTEM_NAME}" MATCHES "Android")
    target_link_libraries(duktape m dl)
ENDIF()

IF("${CMAKE_SYSTEM_NAME}" MATCHES "Linux")
    target_link_libraries(duktape m dl rt)
ENDIF()

IF(MSVC)
    FOREACH(FLAG_VAR CMAKE_C_FLAGS_DEBUG CMAKE_CXX_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE CMAKE_CXX_FLAGS_RELEASE CMAKE_C_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO CMAKE_CXX_FLAGS_RELWITHDEBINFO)
        string(REGEX REPLACE "/MD" "/MT" ${FLAG_VAR} "${${FLAG_VAR}}")
        string(REGEX REPLACE "/MDd" "/MTd" ${FLAG_VAR} "${${FLAG_VAR}}")
    ENDFOREACH(FLAG_VAR)
    SET (CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG}" CACHE STRING "MSVC C Debug MT flags " FORCE)
    SET (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}" CACHE STRING "MSVC CXX Debug MT flags " FORCE)
    SET (CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}" CACHE STRING "MSVC C Release MT flags " FORCE)
    SET (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}" CACHE STRING "MSVC CXX Release MT flags " FORCE)
    SET (CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL}" CACHE STRING "MSVC C Debug MT flags " FORCE)
    SET (CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL}" CACHE STRING "MSVC C Release MT flags " FORCE)
    SET (CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO}" CACHE STRING "MSVC CXX Debug MT flags " FORCE)
    SET (CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO}" CACHE STRING "MSVC CXX Release MT flags " FORCE)
ENDIF()
